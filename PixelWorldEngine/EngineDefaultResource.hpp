#include "pch.hpp"

namespace PixelWorldEngine {
	constexpr char vsPixelWorldDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n    uint id : SV_INSTANCEID; \n}; \n \nstruct InstanceData \n{ \n    int4 renderObjectID; \n    matrix worldTransform; \n    float4 renderColor; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \ncbuffer RenderConfig : register(b1) \n{ \n    int4 maxRenderObjectID; \n    float4 unused[3]; \n}; \n \nTexture2D Texture0 : register(t0); \n \nStructuredBuffer<InstanceData> instanceData : register(t1); \n \nSamplerState sampler0 : register(s0); \n \nOutputData main(InputData input, uint id : SV_INSTANCEID) \n{ \n    OutputData result; \n \n    result.positionH = mul(float4(input.position, 1.f), instanceData[id].worldTransform); \n    result.positionH = mul(result.positionH, project); \n \n    result.color = input.color; \n    result.tex0 = input.tex0; \n    result.id = id; \n \n    return result; \n}\n";
	constexpr char psPixelWorldDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct InstanceData \n{ \n    int4 renderObjectID; \n    matrix worldTransform; \n    float4 renderColor; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \ncbuffer RenderConfig : register(b1) \n{ \n    int4 maxRenderObjectID; \n    float4 unused[3]; \n}; \n \nTexture2D Texture0 : register(t0); \n \nStructuredBuffer<InstanceData> instanceData : register(t1); \n \nSamplerState sampler0 : register(s0); \n \nfloat2 getTexcoord(float2 originTexcoord, int renderObjectID, int maxRenderObjectID) \n{ \n    float distance = 1.0f / maxRenderObjectID; \n \n    return float2((renderObjectID - 1 + originTexcoord.x) * distance, originTexcoord.y); \n} \n \nfloat4 main(OutputData input, uint id : SV_INSTANCEID) : SV_TARGET \n{ \n    if (instanceData[id].renderObjectID[0] == 0 && instanceData[id].renderObjectID[1] == 0 && \n        instanceData[id].renderObjectID[2] == 0 && instanceData[id].renderObjectID[3] == 0) \n        return instanceData[id].renderColor; \n \n    if (instanceData[id].renderObjectID[0] != 0) \n    { \n        float2 texcoord = getTexcoord(input.tex0, instanceData[id].renderObjectID[0], \n            maxRenderObjectID[0]); \n \n        float4 result = Texture0.Sample(sampler0, texcoord); \n \n        if (result.a > 0) \n        { \n            result.a *= instanceData[id].renderColor.a; \n            return result; \n        } \n    } \n \n    if (instanceData[id].renderObjectID[1] != 0) \n    { \n        float2 texcoord = getTexcoord(input.tex0, instanceData[id].renderObjectID[1], \n            maxRenderObjectID[0]); \n \n        float4 result = Texture0.Sample(sampler0, texcoord); \n \n        if (result.a > 0) \n        { \n            result.a *= instanceData[id].renderColor.a; \n            return result; \n        } \n    } \n \n    if (instanceData[id].renderObjectID[2] != 0) \n    { \n        float2 texcoord = getTexcoord(input.tex0, instanceData[id].renderObjectID[2], \n            maxRenderObjectID[0]); \n \n        float4 result = Texture0.Sample(sampler0, texcoord); \n \n        if (result.a > 0) \n        { \n            result.a *= instanceData[id].renderColor.a; \n            return result; \n        } \n    } \n \n    if (instanceData[id].renderObjectID[3] != 0) \n    { \n        float2 texcoord = getTexcoord(input.tex0, instanceData[id].renderObjectID[3], \n            maxRenderObjectID[0]); \n \n        float4 result = Texture0.Sample(sampler0, texcoord); \n \n        if (result.a > 0) \n        { \n            result.a *= instanceData[id].renderColor.a; \n            return result; \n        } \n    } \n     \n    clip(-1); \n \n    return float4(0, 0, 0, 0); \n}\n";
	constexpr char vsApplicationDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \nTexture2D Texture : register(t0); \n \nSamplerState sample : register(s0); \n \nOutputData main(InputData input) \n{ \n    OutputData result; \n     \n    result.positionH = mul(float4(input.position, 1.0f), project); \n \n    result.color = input.color; \n    result.tex0 = input.tex0; \n \n    return result; \n} \n";
	constexpr char psApplicationDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \nTexture2D Texture : register(t0); \n \nSamplerState sample : register(s0); \n \nfloat4 main(OutputData input) : SV_TARGET \n{ \n    return Texture.Sample(sample, input.tex0); \n}\n";

}