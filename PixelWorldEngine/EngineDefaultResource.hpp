#include "pch.hpp"

namespace PixelWorldEngine {
	constexpr char vsPixelWorldDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n    uint id : SV_INSTANCEID; \n}; \n \nstruct InstanceData \n{ \n    int4 setting; \n    matrix worldTransform; \n    matrix texcoordTransform; \n    float4 renderColor; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \ncbuffer RenderConfig : register(b1) \n{ \n    float4 unused[4]; \n}; \n \nStructuredBuffer<InstanceData> instanceData : register(t0); \n \nTexture2D Texture0 : register(t1); \nTexture2D Texture1 : register(t2); \nTexture2D Texture2 : register(t3); \nTexture2D Texture3 : register(t4); \n \n \nSamplerState sampler0 : register(s0); \n \nOutputData main(InputData input, uint id : SV_INSTANCEID) \n{ \n    OutputData result; \n \n    result.positionH = mul(float4(input.position, 1.f), instanceData[id].worldTransform); \n    result.positionH = mul(result.positionH, project); \n \n    result.color = input.color; \n    result.tex0 = mul(float4(input.tex0, 0, 1), instanceData[id].texcoordTransform).xy; \n    result.id = id; \n \n    return result; \n}\n";
	constexpr char psPixelWorldDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct InstanceData \n{ \n    int4 setting; \n    matrix worldTransform; \n    matrix texcoordTransform; \n    float4 renderColor; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \ncbuffer RenderConfig : register(b1) \n{ \n    float4 unused[4]; \n}; \n \nStructuredBuffer<InstanceData> instanceData : register(t0); \n \nTexture2D Texture0 : register(t1); \nTexture2D Texture1 : register(t2); \nTexture2D Texture2 : register(t3); \nTexture2D Texture3 : register(t4); \n \n \nSamplerState sampler0 : register(s0); \n \nfloat4 main(OutputData input, uint id : SV_INSTANCEID) : SV_TARGET \n{ \n    if (instanceData[id].setting[0] == 0) \n        return instanceData[id].renderColor; \n \n    if (instanceData[id].setting[1] == 0) \n    { \n        float4 result = Texture0.Sample(sampler0, input.tex0); \n \n        if (result.a > 0) \n        { \n            result.a = result.a * instanceData[id].renderColor.a; \n \n            return result; \n        } \n    } \n \n    if (instanceData[id].setting[1] == 1) \n    { \n        float4 result = Texture1.Sample(sampler0, input.tex0); \n \n        if (result.a > 0) \n        { \n            result.a = result.a * instanceData[id].renderColor.a; \n \n            return result; \n        } \n    } \n \n    if (instanceData[id].setting[1] == 2) \n    { \n        float4 result = Texture2.Sample(sampler0, input.tex0); \n \n        if (result.a > 0) \n        { \n            result.a = result.a * instanceData[id].renderColor.a; \n \n            return result; \n        } \n    } \n \n    if (instanceData[id].setting[1] == 3) \n    { \n        float4 result = Texture3.Sample(sampler0, input.tex0); \n \n        if (result.a > 0) \n        { \n            result.a = result.a * instanceData[id].renderColor.a; \n \n            return result; \n        } \n    } \n    \n     \n    clip(-1); \n \n    return float4(0, 0, 0, 0); \n}\n";
	constexpr char vsApplicationDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \nTexture2D Texture : register(t0); \n \nSamplerState sample : register(s0); \n \nOutputData main(InputData input) \n{ \n    OutputData result; \n     \n    result.positionH = mul(float4(input.position, 1.0f), project); \n \n    result.color = input.color; \n    result.tex0 = input.tex0; \n \n    return result; \n} \n";
	constexpr char psApplicationDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \nTexture2D Texture : register(t0); \n \nSamplerState sample : register(s0); \n \nfloat4 main(OutputData input) : SV_TARGET \n{ \n    return Texture.Sample(sample, input.tex0); \n}\n";

}