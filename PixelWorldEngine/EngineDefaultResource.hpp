#include "pch.hpp"

namespace PixelWorldEngine {
	constexpr char vsPixelWorldDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \n#define PIXELFORMAT_R8G8B8A8 28 \n#define PIXELFORMAT_A8 65 \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n    uint id : SV_INSTANCEID; \n}; \n \nstruct InstanceData \n{ \n    int4 setting; \n    matrix worldTransform; \n    matrix texcoordTransform; \n    float4 renderColor; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \ncbuffer RenderConfig : register(b1) \n{ \n    int4 mergeTextureFormat; \n    float4 unused[3]; \n}; \n \nStructuredBuffer<InstanceData> instanceData : register(t0); \n \nTexture2DArray Texture0 : register(t1); \nTexture2DArray Texture1 : register(t2); \n \nSamplerState sampler0 : register(s0); \n \nOutputData main(InputData input, uint id : SV_INSTANCEID) \n{ \n    OutputData result; \n \n    result.positionH = mul(float4(input.position, 1.f), instanceData[id].worldTransform); \n    result.positionH = mul(result.positionH, project); \n \n    result.color = input.color; \n    result.tex0 = mul(float4(input.tex0, 0, 1), instanceData[id].texcoordTransform).xy; \n    result.id = id; \n \n    return result; \n}\n";
	constexpr char psPixelWorldDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \n#define PIXELFORMAT_R8G8B8A8 28 \n#define PIXELFORMAT_A8 65 \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct InstanceData \n{ \n    int4 setting; \n    matrix worldTransform; \n    matrix texcoordTransform; \n    float4 renderColor; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \ncbuffer RenderConfig : register(b1) \n{ \n    float4 unused[4]; \n}; \n \nStructuredBuffer<InstanceData> instanceData : register(t0); \n \nTexture2DArray Texture0 : register(t1); \nTexture2DArray Texture1 : register(t2); \n \nSamplerState sampler0 : register(s0); \n \nfloat4 main(OutputData input, uint id : SV_INSTANCEID) : SV_TARGET \n{ \n    if (instanceData[id].setting[0] == 0) \n        return instanceData[id].renderColor; \n \n    int which = instanceData[id].setting[1]; \n     \n    float4 texColor = float4(0.0f, 0.0f, 0.0f, 0.0f); \n \n    if (instanceData[id].setting[2] == 0) texColor = Texture0.Sample(sampler0, float3(input.tex0, which)); \n    if (instanceData[id].setting[2] == 1) texColor = float4(1.0f, 1.0f, 1.0f, Texture1.Sample(sampler0, float3(input.tex0, which)).w); \n \n    return texColor * instanceData[id].renderColor; \n}\n";
	constexpr char vsApplicationDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \nTexture2D Texture : register(t0); \n \nSamplerState sample : register(s0); \n \nOutputData main(InputData input) \n{ \n    OutputData result; \n     \n    result.positionH = mul(float4(input.position, 1.0f), project); \n \n    result.color = input.color; \n    result.tex0 = input.tex0; \n \n    return result; \n} \n";
	constexpr char psApplicationDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \nTexture2D Texture : register(t0); \n \nSamplerState sample : register(s0); \n \nfloat4 main(OutputData input) : SV_TARGET \n{ \n    return Texture.Sample(sample, input.tex0); \n}\n";
	constexpr char lowVsPixelWorldDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \n#define PIXELFORMAT_R8G8B8A8 28 \n#define PIXELFORMAT_A8 65 \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n    uint id : SV_INSTANCEID; \n}; \n \nstruct InstanceData \n{ \n    int4 setting; \n    matrix worldTransform; \n    matrix texcoordTransform; \n    float4 renderColor; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \ncbuffer RenderConfig : register(b1) \n{ \n    int4 mergeTextureFormat; \n    float4 unused[3]; \n}; \n \ncbuffer InstanceDatas : register(b2) \n{ \n    InstanceData instanceData[100]; \n} \n \nTexture2DArray Texture0 : register(t1); \nTexture2DArray Texture1 : register(t2); \n \nSamplerState sampler0 : register(s0); \n \nOutputData main(InputData input, uint id : SV_INSTANCEID) \n{ \n    OutputData result; \n \n    result.positionH = mul(float4(input.position, 1.f), instanceData[id].worldTransform); \n    result.positionH = mul(result.positionH, project); \n \n    result.color = input.color; \n    result.tex0 = mul(float4(input.tex0, 0, 1), instanceData[id].texcoordTransform).xy; \n    result.id = id; \n \n    return result; \n}\n";
	constexpr char lowPsPixelWorldDefaultShaderCode[] = "#pragma pack_matrix(row_major)  \n \n#define PIXELFORMAT_R8G8B8A8 28 \n#define PIXELFORMAT_A8 65 \n \nstruct InputData \n{ \n    float3 position : POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct OutputData \n{ \n    float4 positionH : SV_POSITION; \n    float4 color : COLOR; \n    float2 tex0 : TEXCOORD0; \n}; \n \nstruct InstanceData \n{ \n    int4 setting; \n    matrix worldTransform; \n    matrix texcoordTransform; \n    float4 renderColor; \n}; \n \ncbuffer Camera : register(b0) \n{ \n    matrix project; \n}; \n \ncbuffer RenderConfig : register(b1) \n{ \n    int4 mergeTextureFormat; \n    float4 unused[3]; \n}; \n \ncbuffer InstanceDatas : register(b2) \n{ \n    InstanceData instanceData[100]; \n} \n \nTexture2DArray Texture0 : register(t1); \nTexture2DArray Texture1 : register(t2); \n \nSamplerState sampler0 : register(s0); \n \nfloat4 main(OutputData input, uint id : SV_INSTANCEID) : SV_TARGET \n{ \n    if (instanceData[id].setting[0] == 0) \n        return instanceData[id].renderColor; \n \n    int which = instanceData[id].setting[1]; \n     \n    float4 texColor = float4(0.0f, 0.0f, 0.0f, 0.0f); \n \n    if (instanceData[id].setting[2] == 0) \n        texColor = Texture0.Sample(sampler0, float3(input.tex0, which)); \n    if (instanceData[id].setting[2] == 1) \n        texColor = float4(1.0f, 1.0f, 1.0f, Texture1.Sample(sampler0, float3(input.tex0, which)).w); \n \n    return texColor * instanceData[id].renderColor; \n}\n";

}